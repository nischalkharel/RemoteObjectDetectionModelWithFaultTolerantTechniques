[paths]
# NVBitFI installation paths (Linux/Jetson paths - adjust if different)
nvbit_release_root = /home/shrec/NischalNVBitFi/nvbit_release_aarch64
nvbitfi_root = %(nvbit_release_root)s/nvbitfi
nvbit_core = %(nvbit_release_root)s/core

# CUDA paths
cuda_root = /usr/local/cuda-12.6
cuda_bin = %(cuda_root)s/bin
cuda_lib = %(cuda_root)s/lib64

# Project paths (adjust to match your actual paths)
project_root = /home/shrec/NischalNVBitFi/RemoteObjectDetectionModelWithFaultTolerantTechniques
model_path = %(project_root)s/Models/yolov8n.pt
dataset_list = %(project_root)s/validation_dataset_list.txt

[env]
# Environment variables to export
PATH = %(cuda_bin)s:$PATH
LD_LIBRARY_PATH = %(cuda_lib)s:%(cuda_root)s/targets/aarch64-linux/lib:/usr/lib/aarch64-linux-gnu:$LD_LIBRARY_PATH
NVBITFI_HOME = %(nvbitfi_root)s
PYTHONPATH = %(project_root)s:$PYTHONPATH

[build]
# NVBitFI build configuration
ARCH = 87
NVBIT_PATH = ../../core
AUTO_PATCH_WARP_VOTE = true
AUTO_PATCH_MAKEFILES = true

[runner]
# NVBitFI pipeline commands
run_profiler = python3 %(nvbitfi_root)s/scripts/run_profiler.py
gen_injection = python3 %(nvbitfi_root)s/scripts/generate_injection_list.py
run_injections = python3 %(nvbitfi_root)s/scripts/run_injections.py standalone
parse_results = python3 %(nvbitfi_root)s/scripts/parse_results.py

[injection]
# Fault injection parameters
inj_model = inst_value
instr_group = gp
num_injections = 10000
timeout_multiplier = 3
seed = 42

[techniques]
# Comma-separated list of techniques to evaluate
# Add new techniques here as you implement them
techniques = notechnique,tmr

[logging]
results_root = %(project_root)s/output
nvbitfi_logs = %(nvbitfi_root)s/logs
verbosity = INFO

[golden]
# Golden predictions configuration
golden_dir = %(project_root)s/output/notechnique_nofault/golden_predictions
iou_threshold = 0.8
ap_tolerance = 0.05
